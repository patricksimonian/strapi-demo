apiVersion: v1
kind: Template
metadata:
  name: ${NAME}-template
  annotations:
    description: 'Template for MongoDB container backup job'
    tags: 'database,backup,mongo'
parameters:
  - name: NAME
    description: the name of the mongodb backup
    value: mongodb-backup
    required: true
  - name: MONGODB_BACKUP_KEEP
    description: 'Number of backups to keep'
    value: '24'
  - name: MONGODB_BACKUP_VOLUME_CLAIM
    description: 'Name of the volume claim to be used as storage'
    value: 'mongodb-backup'
  - name: MONGODB_SECRET_NAME
    value: mongodb-ha
    description: the mongodb secret key reference
  - name: MONGODB_IMAGE_TAG
    description: Name of the MongoDB tag that should be used
    value: "3.6"
  - name: STORAGE_CLASS
    description: the storage class for the Mongo
    value: netapp-file-standard
  - name: MONGODB_SERVICE_HOST
    required: true
    description: the mongo service to target and get a mongo dump from
objects:
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: ${NAME}
    data:
      backup-restore-verify.sh: |-
        #!/bin/bash 
        function remove_old_backups () {
          echo "==== clearing old backups if available ===="
          ls -rdt /var/data/mongodb-backup/dump-* |
          head -n -$MONGODB_BACKUP_KEEP |
          xargs rm -rf
        }
        remove_old_backups || echo "no backups found"

        DIR=/var/data/mongodb-backup/dump-`date +%F-%H-%M-%S` &&
        mongodump -j 1 -u admin -p $MONGODB_ADMIN_PASSWORD --host $MONGODB_SERVICE_HOST --authenticationDatabase=admin --gzip --out=$DIR &&
        echo &&
        echo "=====  ATTEMPTING RESTORE OF BACKUP AT $DIR ===== " &&
        mongorestore -u admin -p $MONGODB_ADMIN_PASSWORD --authenticationDatabase admin --gzip $DIR/$MONGODB_DATABASE -d $MONGODB_DATABASE &&
        echo "==== Verify $MONGODB_DATABASE exists ====" &&
        mongo admin -u admin -p $MONGODB_ADMIN_PASSWORD --eval='db.adminCommand( { listDatabases: 1, nameOnly: true, filter: { name: "$MONGODB_DATABASE" } } )'
        echo "==== exiting ===="
        exit 0
  - apiVersion: v1
    kind: Pod
    metadata:
      name: ${NAME}
    spec:
      volumes:
        - name: ${NAME}
          persistentVolumeClaim:
            claimName: ${MONGODB_BACKUP_VOLUME_CLAIM}
        - configMap:
            defaultMode: 0777
            name: ${NAME}
          name: ${NAME}-script
      containers:
        - name: ${NAME}
          image: 'docker-registry.default.svc:5000/openshift/mongodb:${MONGODB_IMAGE_TAG}'
          command:
            - 'bash'
            - '-c'
            - 'run-mongod'
          resources:
          limits:
            cpu: 250m
            memory: 1Gi
          requests:
            cpu: 100m
            memory: 512Mi
          env:
            - name: MONGODB_BACKUP_KEEP
              value: ${MONGODB_BACKUP_KEEP}
            - name: MONGODB_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: admin-password
                  name: "${MONGODB_SECRET_NAME}"
            - name: MONGODB_SERVICE_HOST
              value: ${MONGODB_SERVICE_HOST}
            - name: MONGODB_DATABASE
              valueFrom:
                secretKeyRef:
                  key: database
                  name: "${MONGODB_SECRET_NAME}"
            - name: MONGODB_USER
              valueFrom:
                secretKeyRef:
                  key: username
                  name: "${MONGODB_SECRET_NAME}"
            - name: MONGODB_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: "${MONGODB_SECRET_NAME}"
          volumeMounts:
            - name: ${NAME}
              mountPath: /var/data/mongodb-backup

            - name: ${NAME}-script
              mountPath: "/var/lib/mongodb/backup-restore-verify.sh"
              subPath: "backup-restore-verify.sh"
      restartPolicy: Never
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      annotations:
        pv.kubernetes.io/bind-completed: "yes"
        pv.kubernetes.io/bound-by-controller: "yes"
        volume.beta.kubernetes.io/storage-provisioner: netapp.io/trident
      name: ${MONGODB_BACKUP_VOLUME_CLAIM}
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
      storageClassName: ${STORAGE_CLASS}
    status: {}
    