Kind: Template
apiVersion: v1
metadata:
  name: digital-gov-mongodb
  annotations:
    description: "MongoDB database running as replicate set"
    iconClass: "icon-nodejs"
    tags: "nodejs,mongodb,replication,instant-app"
parameters:
  - name: SUFFIX
    required: true
    description: a suffix used in conjunction with NAME to further isolate different instances of these components
    displayName: suffix
  - name: PULL_REQUEST_NUMBER
    default: 0
    required: false 
    description: The pull request number associated with this object
    displayName: Pull Request Number
  - name: MEMORY_REQUEST
    description: Amount of Memory to Request.
    displayName: Memory Request
    required: true

  - name: MEMORY_LIMIT
    description: Amount of Memory to Limit.
    displayName: Memory Limit
    required: true

  - name: CPU_REQUEST
    description: Amount of CPU to Request.
    displayName: Memory Request
    required: true

  - name: CPU_LIMIT
    description: Amount of CPU to Limit.
    displayName: Memory Limit
    required: true
    
  - name: MONGODB_SERVICE_NAME
    description: Name of the MongoDB Service
    displayName: MongoDB Service Name
    value: "mongodb"
    required: true

  - name: MONGODB_REPLICAS
    description: Number of MongoDB replica pods
    displayName: MongoDB Replicas
    value: "3"
    required: true

  - name: MONGODB_SECRET_NAME
    displayName: MongoDB Secret.
    description: Name of the Secret containing MongoDB Assets
    value: "mongodb"
    required: true
    
  - name: MONGODB_REPLICA_NAME
    displayName: "Replica Set Name"
    description: "The name of the replica set."
    value: rs0
    required: true

  - name: MONGODB_KEYFILE_VALUE
    displayName: "Keyfile Content"
    description: "The value of the MongoDB keyfile (https://docs.mongodb.com/manual/core/security-internal-authentication/#internal-auth-keyfile)."
    generate: expression
    from: "[a-zA-Z0-9]{255}"
    required: true

  - name: MONGODB_IMAGE
    displayName: "MongoDB Docker Image"
    description: "A reference to a supported MongoDB Docker image."
    value: "docker-registry.default.svc:5000/openshift/mongodb"
    required: true

  - name: MONGODB_IMAGE_TAG
    description: Name of the MongoDB tag that should be used
    displayName: MongoDB Tag
    value: "3.6"
    required: true

  - name: VOLUME_CAPACITY
    displayName: "Volume Capacity for MongoDB"
    description: "Volume space available for data, e.g. 512Mi, 2Gi."
    required: true

  - name: SC_MONGO
    description: The Storage Class for the MongoDB
    displayName: Storage Class for MongoDB
    required: true

objects:
  # A non-headless service which takes pod readiness into consideration
  - kind: Service
    apiVersion: v1
    metadata:
      name: "${MONGODB_SERVICE_NAME}"
      labels:
        app: ${MONGODB_SERVICE_NAME}-${SUFFIX}
        version: ${PULL_REQUEST_NUMBER}
        pr: ${PULL_REQUEST_NUMBER}
        group: ${MONGODB_SERVICE_NAME}
        name: "${MONGODB_SERVICE_NAME}"
    spec:
      ports:
        - name: mongodb
          port: 27017
      selector:
        name: "${MONGODB_SERVICE_NAME}"

  # A headless service to create DNS records
  - kind: Service
    apiVersion: v1
    metadata:
      name: "${MONGODB_SERVICE_NAME}-internal"
      labels:
        app: ${MONGODB_SERVICE_NAME}-${SUFFIX}
        version: ${PULL_REQUEST_NUMBER}
        pr: ${PULL_REQUEST_NUMBER}
        group: ${MONGODB_SERVICE_NAME}
        name: "${MONGODB_SERVICE_NAME}"
      annotations:
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
    spec:    
      clusterIP: None
      ports:
        - name: mongodb
          port: 27017
      selector:
        name: "${MONGODB_SERVICE_NAME}"

# Mongo DB StatefulSet
  - kind: StatefulSet
    apiVersion: apps/v1beta1
    metadata:
      name: "${MONGODB_SERVICE_NAME}"
      labels:
        app: ${MONGODB_SERVICE_NAME}-${SUFFIX}
        version: ${PULL_REQUEST_NUMBER}
        pr: ${PULL_REQUEST_NUMBER}
        group: ${MONGODB_SERVICE_NAME}
    spec:
      serviceName: "${MONGODB_SERVICE_NAME}-internal"
      replicas: "${MONGODB_REPLICAS}"
      template:
        metadata:
          labels:
            name: "${MONGODB_SERVICE_NAME}"
            app: ${MONGODB_SERVICE_NAME}-${SUFFIX}
            version: ${PULL_REQUEST_NUMBER}
            pr: ${PULL_REQUEST_NUMBER}
            group: ${MONGODB_SERVICE_NAME}
        spec:
          affinity:
            podAntiAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
              - labelSelector:
                  matchExpressions:
                  - key: name
                    operator: In
                    values: 
                    - ${MONGODB_SERVICE_NAME}
                topologyKey: "kubernetes.io/hostname"
          containers:
            - name: mongo-container
              image: "${MONGODB_IMAGE}:${MONGODB_IMAGE_TAG}"
              ports:
                - containerPort: 27017
              args:
                - "run-mongod-replication"
              volumeMounts:
                - name: mongo-data
                  mountPath: "/var/lib/mongodb/data"
              env:
                - name: MONGODB_USER
                  valueFrom:
                    secretKeyRef:
                      key: username
                      name: "${MONGODB_SECRET_NAME}"
                - name: MONGODB_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: password
                      name: "${MONGODB_SECRET_NAME}"
                - name: MONGODB_DATABASE
                  valueFrom:
                    secretKeyRef:
                      key: database
                      name: "${MONGODB_SECRET_NAME}"
                - name: MONGODB_ADMIN_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: admin-password
                      name: "${MONGODB_SECRET_NAME}"
                - name: MONGO_OPLOG_URL
                  valueFrom:
                    secretKeyRef:
                      key: mongo-oplog-url
                      name: "${MONGODB_SECRET_NAME}"
                - name: MONGODB_REPLICA_NAME
                  valueFrom:
                    secretKeyRef:
                      key: replica-name
                      name: "${MONGODB_SECRET_NAME}"
                - name: MONGODB_KEYFILE_VALUE
                  value: "${MONGODB_KEYFILE_VALUE}"
                - name: MONGODB_SERVICE_NAME
                  value: "${MONGODB_SERVICE_NAME}-internal"
              resources:
                limits:
                  memory: "${MEMORY_LIMIT}"
                  cpu: "${CPU_LIMIT}"
                requests:
                  memory: "${MEMORY_REQUEST}"
                  cpu: "${CPU_REQUEST}"
              readinessProbe:
                exec:
                  command:
                    - stat
                    - /tmp/initialized
      volumeClaimTemplates:
        - metadata:
            name: mongo-data
            labels:
              app: ${MONGODB_SERVICE_NAME}-${SUFFIX}
              version: ${PULL_REQUEST_NUMBER}
              pr: ${PULL_REQUEST_NUMBER}
              group: ${MONGODB_SERVICE_NAME}
              name: "${MONGODB_SERVICE_NAME}"
          spec:
            accessModes: [ ReadWriteOnce ]
            storageClassName: "${SC_MONGO}"
            resources:
              requests:
                storage: "${VOLUME_CAPACITY}"

